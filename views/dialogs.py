"""
–§–∞–π–ª: views/dialogs.py
–•–æ–ª—Å—Ç: tg_cli-views-dialogs.py (ID –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π)
–û–ø–∏—Å–∞–Ω–∏–µ: –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ Rich‚Äë—Ç–∞–±–ª–∏—Ü—ã —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ –∏ —Å—á—ë—Ç—á–∏–∫–æ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö.
"""
from __future__ import annotations

from typing import List, Any

from rich.table import Table
from rich.text import Text

from tg_cli.state import AppState
from tg_cli.api.client import TelegramClientWrapper


async def render_dialog_list(client: TelegramClientWrapper, state: AppState):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç Rich‚Äë—Ç–∞–±–ª–∏—Ü—É."""
    if not state.dialogs:  # –ø–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        dialogs = []
        async for dialog in client.iter_dialogs(limit=100):  # –ª–∏–º–∏—Ç–∏—Ä—É–µ–º, –ø–æ—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—è
            if state.dialog_cursor.only_unread and dialog.unread_count == 0:
                continue
            dialogs.append(dialog)
        state.dialogs = dialogs

    start = state.dialog_cursor.offset
    end = start + state.dialog_cursor.page_size
    slice_ = state.dialogs[start:end]

    table = Table(expand=True)
    table.add_column("‚Ññ", justify="right", width=4)
    table.add_column("–¢–∏–ø", width=2)
    table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", overflow="fold")
    table.add_column("–ù–µ–ø—Ä.", justify="right", width=6)
    table.add_column("–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", overflow="ellipsis")

    for idx, dlg in enumerate(slice_, start=start + 1):
        icon = _dialog_icon(dlg)
        last_msg = (dlg.message.text[:40] + "‚Ä¶") if dlg.message and dlg.message.text else "<–º–µ–¥–∏–∞>"
        table.add_row(
            str(idx),
            icon,
            dlg.name or str(dlg.entity.id),
            str(dlg.unread_count) if dlg.unread_count else "",
            last_msg,
        )
    return table


def _dialog_icon(dlg: Any) -> str:
    if dlg.is_user:
        return "üë§"
    if dlg.is_group:
        return "üí¨"
    if dlg.is_channel:
        return "üì¢"
    return "?"
